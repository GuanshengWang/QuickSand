/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class CDB : TBase
{
  private string _sql;
  private string _dbHost;
  private int _dbPort;
  private string _dbUserName;
  private string _dbPassword;
  private string _dbName;
  private CDBDriver _driver;
  private string _prefix;

  public string Sql
  {
    get
    {
      return _sql;
    }
    set
    {
      __isset.sql = true;
      this._sql = value;
    }
  }

  public string DbHost
  {
    get
    {
      return _dbHost;
    }
    set
    {
      __isset.dbHost = true;
      this._dbHost = value;
    }
  }

  public int DbPort
  {
    get
    {
      return _dbPort;
    }
    set
    {
      __isset.dbPort = true;
      this._dbPort = value;
    }
  }

  public string DbUserName
  {
    get
    {
      return _dbUserName;
    }
    set
    {
      __isset.dbUserName = true;
      this._dbUserName = value;
    }
  }

  public string DbPassword
  {
    get
    {
      return _dbPassword;
    }
    set
    {
      __isset.dbPassword = true;
      this._dbPassword = value;
    }
  }

  public string DbName
  {
    get
    {
      return _dbName;
    }
    set
    {
      __isset.dbName = true;
      this._dbName = value;
    }
  }

  public CDBDriver Driver
  {
    get
    {
      return _driver;
    }
    set
    {
      __isset.driver = true;
      this._driver = value;
    }
  }

  public string Prefix
  {
    get
    {
      return _prefix;
    }
    set
    {
      __isset.prefix = true;
      this._prefix = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool sql;
    public bool dbHost;
    public bool dbPort;
    public bool dbUserName;
    public bool dbPassword;
    public bool dbName;
    public bool driver;
    public bool prefix;
  }

  public CDB() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.String) {
            Sql = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.String) {
            DbHost = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.I32) {
            DbPort = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.String) {
            DbUserName = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 5:
          if (field.Type == TType.String) {
            DbPassword = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 6:
          if (field.Type == TType.String) {
            DbName = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 7:
          if (field.Type == TType.Struct) {
            Driver = new CDBDriver();
            Driver.Read(iprot);
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 8:
          if (field.Type == TType.String) {
            Prefix = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("CDB");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (Sql != null && __isset.sql) {
      field.Name = "sql";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Sql);
      oprot.WriteFieldEnd();
    }
    if (DbHost != null && __isset.dbHost) {
      field.Name = "dbHost";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(DbHost);
      oprot.WriteFieldEnd();
    }
    if (__isset.dbPort) {
      field.Name = "dbPort";
      field.Type = TType.I32;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(DbPort);
      oprot.WriteFieldEnd();
    }
    if (DbUserName != null && __isset.dbUserName) {
      field.Name = "dbUserName";
      field.Type = TType.String;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(DbUserName);
      oprot.WriteFieldEnd();
    }
    if (DbPassword != null && __isset.dbPassword) {
      field.Name = "dbPassword";
      field.Type = TType.String;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(DbPassword);
      oprot.WriteFieldEnd();
    }
    if (DbName != null && __isset.dbName) {
      field.Name = "dbName";
      field.Type = TType.String;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(DbName);
      oprot.WriteFieldEnd();
    }
    if (Driver != null && __isset.driver) {
      field.Name = "driver";
      field.Type = TType.Struct;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      Driver.Write(oprot);
      oprot.WriteFieldEnd();
    }
    if (Prefix != null && __isset.prefix) {
      field.Name = "prefix";
      field.Type = TType.String;
      field.ID = 8;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Prefix);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("CDB(");
    sb.Append("Sql: ");
    sb.Append(Sql);
    sb.Append(",DbHost: ");
    sb.Append(DbHost);
    sb.Append(",DbPort: ");
    sb.Append(DbPort);
    sb.Append(",DbUserName: ");
    sb.Append(DbUserName);
    sb.Append(",DbPassword: ");
    sb.Append(DbPassword);
    sb.Append(",DbName: ");
    sb.Append(DbName);
    sb.Append(",Driver: ");
    sb.Append(Driver== null ? "<null>" : Driver.ToString());
    sb.Append(",Prefix: ");
    sb.Append(Prefix);
    sb.Append(")");
    return sb.ToString();
  }

}

