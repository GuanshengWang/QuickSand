/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class DBLoadService {
  public interface Iface {
    void load(string prefix, string objectList);
    #if SILVERLIGHT
    IAsyncResult Begin_load(AsyncCallback callback, object state, string prefix, string objectList);
    void End_load(IAsyncResult asyncResult);
    #endif
  }

  public class Client : Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    
    #if SILVERLIGHT
    public IAsyncResult Begin_load(AsyncCallback callback, object state, string prefix, string objectList)
    {
      return send_load(callback, state, prefix, objectList);
    }

    public void End_load(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_load();
    }

    #endif

    public void load(string prefix, string objectList)
    {
      #if !SILVERLIGHT
      send_load(prefix, objectList);
      recv_load();

      #else
      var asyncResult = Begin_load(null, null, prefix, objectList);
      End_load(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_load(AsyncCallback callback, object state, string prefix, string objectList)
    #else
    public void send_load(string prefix, string objectList)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("load", TMessageType.Call, seqid_));
      load_args args = new load_args();
      args.Prefix = prefix;
      args.ObjectList = objectList;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_load()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      load_result result = new load_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["load"] = load_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void load_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      load_args args = new load_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      load_result result = new load_result();
      iface_.load(args.Prefix, args.ObjectList);
      oprot.WriteMessageBegin(new TMessage("load", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class load_args : TBase
  {
    private string _prefix;
    private string _objectList;

    public string Prefix
    {
      get
      {
        return _prefix;
      }
      set
      {
        __isset.prefix = true;
        this._prefix = value;
      }
    }

    public string ObjectList
    {
      get
      {
        return _objectList;
      }
      set
      {
        __isset.objectList = true;
        this._objectList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool prefix;
      public bool objectList;
    }

    public load_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Prefix = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ObjectList = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("load_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Prefix != null && __isset.prefix) {
        field.Name = "prefix";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Prefix);
        oprot.WriteFieldEnd();
      }
      if (ObjectList != null && __isset.objectList) {
        field.Name = "objectList";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ObjectList);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("load_args(");
      sb.Append("Prefix: ");
      sb.Append(Prefix);
      sb.Append(",ObjectList: ");
      sb.Append(ObjectList);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class load_result : TBase
  {

    public load_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("load_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("load_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }

}
