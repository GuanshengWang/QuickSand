/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class CTask : TBase
{
  private int _name;
  private string _cronTime;
  private string _userName;
  private List<CDB> _dbs;
  private int _batchSaveNum;

  public int Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string CronTime
  {
    get
    {
      return _cronTime;
    }
    set
    {
      __isset.cronTime = true;
      this._cronTime = value;
    }
  }

  public string UserName
  {
    get
    {
      return _userName;
    }
    set
    {
      __isset.userName = true;
      this._userName = value;
    }
  }

  public List<CDB> Dbs
  {
    get
    {
      return _dbs;
    }
    set
    {
      __isset.dbs = true;
      this._dbs = value;
    }
  }

  public int BatchSaveNum
  {
    get
    {
      return _batchSaveNum;
    }
    set
    {
      __isset.batchSaveNum = true;
      this._batchSaveNum = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool name;
    public bool cronTime;
    public bool userName;
    public bool dbs;
    public bool batchSaveNum;
  }

  public CTask() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.I32) {
            Name = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.String) {
            CronTime = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.String) {
            UserName = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.List) {
            {
              Dbs = new List<CDB>();
              TList _list0 = iprot.ReadListBegin();
              for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
              {
                CDB _elem2 = new CDB();
                _elem2 = new CDB();
                _elem2.Read(iprot);
                Dbs.Add(_elem2);
              }
              iprot.ReadListEnd();
            }
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 5:
          if (field.Type == TType.I32) {
            BatchSaveNum = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("CTask");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (__isset.name) {
      field.Name = "name";
      field.Type = TType.I32;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Name);
      oprot.WriteFieldEnd();
    }
    if (CronTime != null && __isset.cronTime) {
      field.Name = "cronTime";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(CronTime);
      oprot.WriteFieldEnd();
    }
    if (UserName != null && __isset.userName) {
      field.Name = "userName";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(UserName);
      oprot.WriteFieldEnd();
    }
    if (Dbs != null && __isset.dbs) {
      field.Name = "dbs";
      field.Type = TType.List;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Dbs.Count));
        foreach (CDB _iter3 in Dbs)
        {
          _iter3.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
    }
    if (__isset.batchSaveNum) {
      field.Name = "batchSaveNum";
      field.Type = TType.I32;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(BatchSaveNum);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("CTask(");
    sb.Append("Name: ");
    sb.Append(Name);
    sb.Append(",CronTime: ");
    sb.Append(CronTime);
    sb.Append(",UserName: ");
    sb.Append(UserName);
    sb.Append(",Dbs: ");
    sb.Append(Dbs);
    sb.Append(",BatchSaveNum: ");
    sb.Append(BatchSaveNum);
    sb.Append(")");
    return sb.ToString();
  }

}

