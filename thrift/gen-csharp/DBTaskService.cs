/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class DBTaskService {
  public interface Iface {
    void createTask(CTask task);
    #if SILVERLIGHT
    IAsyncResult Begin_createTask(AsyncCallback callback, object state, CTask task);
    void End_createTask(IAsyncResult asyncResult);
    #endif
    void startTask(string name);
    #if SILVERLIGHT
    IAsyncResult Begin_startTask(AsyncCallback callback, object state, string name);
    void End_startTask(IAsyncResult asyncResult);
    #endif
    void cancelTask(string name);
    #if SILVERLIGHT
    IAsyncResult Begin_cancelTask(AsyncCallback callback, object state, string name);
    void End_cancelTask(IAsyncResult asyncResult);
    #endif
    void listTask();
    #if SILVERLIGHT
    IAsyncResult Begin_listTask(AsyncCallback callback, object state, );
    void End_listTask(IAsyncResult asyncResult);
    #endif
  }

  public class Client : Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    
    #if SILVERLIGHT
    public IAsyncResult Begin_createTask(AsyncCallback callback, object state, CTask task)
    {
      return send_createTask(callback, state, task);
    }

    public void End_createTask(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_createTask();
    }

    #endif

    public void createTask(CTask task)
    {
      #if !SILVERLIGHT
      send_createTask(task);
      recv_createTask();

      #else
      var asyncResult = Begin_createTask(null, null, task);
      End_createTask(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createTask(AsyncCallback callback, object state, CTask task)
    #else
    public void send_createTask(CTask task)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("createTask", TMessageType.Call, seqid_));
      createTask_args args = new createTask_args();
      args.Task = task;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_createTask()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createTask_result result = new createTask_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_startTask(AsyncCallback callback, object state, string name)
    {
      return send_startTask(callback, state, name);
    }

    public void End_startTask(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_startTask();
    }

    #endif

    public void startTask(string name)
    {
      #if !SILVERLIGHT
      send_startTask(name);
      recv_startTask();

      #else
      var asyncResult = Begin_startTask(null, null, name);
      End_startTask(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_startTask(AsyncCallback callback, object state, string name)
    #else
    public void send_startTask(string name)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("startTask", TMessageType.Call, seqid_));
      startTask_args args = new startTask_args();
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_startTask()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      startTask_result result = new startTask_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_cancelTask(AsyncCallback callback, object state, string name)
    {
      return send_cancelTask(callback, state, name);
    }

    public void End_cancelTask(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_cancelTask();
    }

    #endif

    public void cancelTask(string name)
    {
      #if !SILVERLIGHT
      send_cancelTask(name);
      recv_cancelTask();

      #else
      var asyncResult = Begin_cancelTask(null, null, name);
      End_cancelTask(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_cancelTask(AsyncCallback callback, object state, string name)
    #else
    public void send_cancelTask(string name)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("cancelTask", TMessageType.Call, seqid_));
      cancelTask_args args = new cancelTask_args();
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_cancelTask()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      cancelTask_result result = new cancelTask_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_listTask(AsyncCallback callback, object state, )
    {
      return send_listTask(callback, state);
    }

    public void End_listTask(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_listTask();
    }

    #endif

    public void listTask()
    {
      #if !SILVERLIGHT
      send_listTask();
      recv_listTask();

      #else
      var asyncResult = Begin_listTask(null, null, );
      End_listTask(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_listTask(AsyncCallback callback, object state, )
    #else
    public void send_listTask()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("listTask", TMessageType.Call, seqid_));
      listTask_args args = new listTask_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_listTask()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      listTask_result result = new listTask_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["createTask"] = createTask_Process;
      processMap_["startTask"] = startTask_Process;
      processMap_["cancelTask"] = cancelTask_Process;
      processMap_["listTask"] = listTask_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void createTask_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createTask_args args = new createTask_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createTask_result result = new createTask_result();
      iface_.createTask(args.Task);
      oprot.WriteMessageBegin(new TMessage("createTask", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void startTask_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      startTask_args args = new startTask_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      startTask_result result = new startTask_result();
      iface_.startTask(args.Name);
      oprot.WriteMessageBegin(new TMessage("startTask", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void cancelTask_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      cancelTask_args args = new cancelTask_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      cancelTask_result result = new cancelTask_result();
      iface_.cancelTask(args.Name);
      oprot.WriteMessageBegin(new TMessage("cancelTask", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void listTask_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      listTask_args args = new listTask_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      listTask_result result = new listTask_result();
      iface_.listTask();
      oprot.WriteMessageBegin(new TMessage("listTask", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createTask_args : TBase
  {
    private CTask _task;

    public CTask Task
    {
      get
      {
        return _task;
      }
      set
      {
        __isset.task = true;
        this._task = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool task;
    }

    public createTask_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Task = new CTask();
              Task.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("createTask_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Task != null && __isset.task) {
        field.Name = "task";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Task.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("createTask_args(");
      sb.Append("Task: ");
      sb.Append(Task== null ? "<null>" : Task.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createTask_result : TBase
  {

    public createTask_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("createTask_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("createTask_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class startTask_args : TBase
  {
    private string _name;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
    }

    public startTask_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("startTask_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("startTask_args(");
      sb.Append("Name: ");
      sb.Append(Name);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class startTask_result : TBase
  {

    public startTask_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("startTask_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("startTask_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class cancelTask_args : TBase
  {
    private string _name;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
    }

    public cancelTask_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("cancelTask_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("cancelTask_args(");
      sb.Append("Name: ");
      sb.Append(Name);
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class cancelTask_result : TBase
  {

    public cancelTask_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("cancelTask_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("cancelTask_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class listTask_args : TBase
  {

    public listTask_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("listTask_args");
      oprot.WriteStructBegin(struc);
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("listTask_args(");
      sb.Append(")");
      return sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class listTask_result : TBase
  {

    public listTask_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("listTask_result");
      oprot.WriteStructBegin(struc);

      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("listTask_result(");
      sb.Append(")");
      return sb.ToString();
    }

  }

}
