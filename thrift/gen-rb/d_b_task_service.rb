#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'yo_da_service_types'

module DBTaskService
  class Client
    include ::Thrift::Client

    def createTask(task)
      send_createTask(task)
      recv_createTask()
    end

    def send_createTask(task)
      send_message('createTask', CreateTask_args, :task => task)
    end

    def recv_createTask()
      result = receive_message(CreateTask_result)
      return
    end

    def startTask(name)
      send_startTask(name)
      recv_startTask()
    end

    def send_startTask(name)
      send_message('startTask', StartTask_args, :name => name)
    end

    def recv_startTask()
      result = receive_message(StartTask_result)
      return
    end

    def cancelTask(name)
      send_cancelTask(name)
      recv_cancelTask()
    end

    def send_cancelTask(name)
      send_message('cancelTask', CancelTask_args, :name => name)
    end

    def recv_cancelTask()
      result = receive_message(CancelTask_result)
      return
    end

    def listTask()
      send_listTask()
      recv_listTask()
    end

    def send_listTask()
      send_message('listTask', ListTask_args)
    end

    def recv_listTask()
      result = receive_message(ListTask_result)
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_createTask(seqid, iprot, oprot)
      args = read_args(iprot, CreateTask_args)
      result = CreateTask_result.new()
      @handler.createTask(args.task)
      write_result(result, oprot, 'createTask', seqid)
    end

    def process_startTask(seqid, iprot, oprot)
      args = read_args(iprot, StartTask_args)
      result = StartTask_result.new()
      @handler.startTask(args.name)
      write_result(result, oprot, 'startTask', seqid)
    end

    def process_cancelTask(seqid, iprot, oprot)
      args = read_args(iprot, CancelTask_args)
      result = CancelTask_result.new()
      @handler.cancelTask(args.name)
      write_result(result, oprot, 'cancelTask', seqid)
    end

    def process_listTask(seqid, iprot, oprot)
      args = read_args(iprot, ListTask_args)
      result = ListTask_result.new()
      @handler.listTask()
      write_result(result, oprot, 'listTask', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class CreateTask_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TASK = 1

    FIELDS = {
      TASK => {:type => ::Thrift::Types::STRUCT, :name => 'task', :class => ::CTask}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateTask_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class StartTask_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class StartTask_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CancelTask_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CancelTask_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ListTask_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ListTask_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

