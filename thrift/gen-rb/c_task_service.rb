#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'yo_da_service_types'

module CTaskService
  class Client
    include ::Thrift::Client

    def createTask(task)
      send_createTask(task)
      return recv_createTask()
    end

    def send_createTask(task)
      send_message('createTask', CreateTask_args, :task => task)
    end

    def recv_createTask()
      result = receive_message(CreateTask_result)
      return result.success unless result.success.nil?
      raise result.ex unless result.ex.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createTask failed: unknown result')
    end

    def startTask(name)
      send_startTask(name)
      return recv_startTask()
    end

    def send_startTask(name)
      send_message('startTask', StartTask_args, :name => name)
    end

    def recv_startTask()
      result = receive_message(StartTask_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'startTask failed: unknown result')
    end

    def cancelTask(name)
      send_cancelTask(name)
      return recv_cancelTask()
    end

    def send_cancelTask(name)
      send_message('cancelTask', CancelTask_args, :name => name)
    end

    def recv_cancelTask()
      result = receive_message(CancelTask_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'cancelTask failed: unknown result')
    end

    def findTask(name)
      send_findTask(name)
      return recv_findTask()
    end

    def send_findTask(name)
      send_message('findTask', FindTask_args, :name => name)
    end

    def recv_findTask()
      result = receive_message(FindTask_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findTask failed: unknown result')
    end

    def listTask()
      send_listTask()
      return recv_listTask()
    end

    def send_listTask()
      send_message('listTask', ListTask_args)
    end

    def recv_listTask()
      result = receive_message(ListTask_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'listTask failed: unknown result')
    end

    def removeTask(name)
      send_removeTask(name)
      recv_removeTask()
    end

    def send_removeTask(name)
      send_message('removeTask', RemoveTask_args, :name => name)
    end

    def recv_removeTask()
      result = receive_message(RemoveTask_result)
      return
    end

    def queryLog(name, start, size)
      send_queryLog(name, start, size)
      return recv_queryLog()
    end

    def send_queryLog(name, start, size)
      send_message('queryLog', QueryLog_args, :name => name, :start => start, :size => size)
    end

    def recv_queryLog()
      result = receive_message(QueryLog_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'queryLog failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_createTask(seqid, iprot, oprot)
      args = read_args(iprot, CreateTask_args)
      result = CreateTask_result.new()
      begin
        result.success = @handler.createTask(args.task)
      rescue ::CDBException => ex
        result.ex = ex
      end
      write_result(result, oprot, 'createTask', seqid)
    end

    def process_startTask(seqid, iprot, oprot)
      args = read_args(iprot, StartTask_args)
      result = StartTask_result.new()
      result.success = @handler.startTask(args.name)
      write_result(result, oprot, 'startTask', seqid)
    end

    def process_cancelTask(seqid, iprot, oprot)
      args = read_args(iprot, CancelTask_args)
      result = CancelTask_result.new()
      result.success = @handler.cancelTask(args.name)
      write_result(result, oprot, 'cancelTask', seqid)
    end

    def process_findTask(seqid, iprot, oprot)
      args = read_args(iprot, FindTask_args)
      result = FindTask_result.new()
      result.success = @handler.findTask(args.name)
      write_result(result, oprot, 'findTask', seqid)
    end

    def process_listTask(seqid, iprot, oprot)
      args = read_args(iprot, ListTask_args)
      result = ListTask_result.new()
      result.success = @handler.listTask()
      write_result(result, oprot, 'listTask', seqid)
    end

    def process_removeTask(seqid, iprot, oprot)
      args = read_args(iprot, RemoveTask_args)
      result = RemoveTask_result.new()
      @handler.removeTask(args.name)
      write_result(result, oprot, 'removeTask', seqid)
    end

    def process_queryLog(seqid, iprot, oprot)
      args = read_args(iprot, QueryLog_args)
      result = QueryLog_result.new()
      result.success = @handler.queryLog(args.name, args.start, args.size)
      write_result(result, oprot, 'queryLog', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class CreateTask_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TASK = 1

    FIELDS = {
      TASK => {:type => ::Thrift::Types::STRUCT, :name => 'task', :class => ::CTask}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateTask_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    EX = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::CDBException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class StartTask_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class StartTask_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CancelTask_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CancelTask_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindTask_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindTask_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::CTask}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ListTask_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ListTask_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CTask}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveTask_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveTask_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class QueryLog_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1
    START = 2
    SIZE = 3

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
      START => {:type => ::Thrift::Types::I32, :name => 'start'},
      SIZE => {:type => ::Thrift::Types::I32, :name => 'size'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class QueryLog_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::CTaskLog}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

